%YAML:1.0

#common parameters
imu_topic: "/imu"
image_topic: "/cam0/image_raw"
output_path: "/home/mikolaj/Projects/catkin_vins/rviz/"

#camera calibration 
model_type: PINHOLE
camera_name: camera
image_width: 640
image_height: 480
projection_parameters:
   k1: 0.02024617925828158
   k2: 0.035596530189017574
   p1: 0.012221374439557255
   p2: 0.009914583484121258
   fx: 485.10643249762376
   fy: 487.60689823108476
   cx: 333.09659108597447
   cy: 256.6414555025254


# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.
                        # 2  Don't know anything about extrinsic parameters. You don't need to give R,T. We will try to calibrate it. Do some rotation movement at beginning.                        
#If you choose 0 or 1, you should write down the following matrix.
#Rotation from camera frame to imu frame, imu^R_cam
extrinsicRotation: !!opencv-matrix
   rows: 3
   cols: 3
   dt: d
   data: [ 0.00568737, -0.99963364,  0.02646186,
          -0.9998657,  -0.00527797,  0.01551534,
          -0.01536999, -0.02654654, -0.99952941 ]

extrinsicTranslation: !!opencv-matrix
   rows: 3
   cols: 1
   dt: d
   data: [0.0, 0.0, 0.0]

#feature traker paprameters
max_cnt: 50            # max feature number in feature tracking
min_dist: 50            # min distance between two features 
freq: 20               # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
equalize: 1             # if image is too dark or light, trun on equalize to find enough features
fisheye: 0              # if using fisheye, trun on it. A circle mask will be loaded to remove edge noisy points

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#acc_n: 0.2          # accelerometer measurement noise standard deviation. #0.1
acc_x_std_dev: 2.0e-01
acc_y_std_dev: 2.0e-01
acc_z_std_dev: 2.0e-01
gyr_n: 2.0e-01        # gyroscope measurement noise standard deviation.    # x,y~=0.018, z~=0.002
acc_w: 2.0000e-03       # accelerometer bias random work noise standard deviation.  #0.02
gyr_w: 4.0e-05       # gyroscope bias random work noise standard deviation.     #4.0e-5
g_norm: 9.81     # gravity magnitude

#loop closure parameters
loop_closure: 0                    # start loop closure
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
fast_relocalization: 0             # useful in real-time and large project
pose_graph_save_path: "/home/tony-ws1/output/pose_graph/" # save and load path

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0.1                             # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#rolling shutter parameters
rolling_shutter: 0                  # 0: global shutter camera, 1: rolling shutter camera
rolling_shutter_tr: 0               # unit: s. rolling shutter read out time per frame (from data sheet). 

#visualization parameters
save_image: 0                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
visualize_imu_forward: 0        # output imu forward propogation to achieve low latency and high frequence results
visualize_camera_size: 0.4      # size of camera marker in RVIZ
